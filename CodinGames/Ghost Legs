using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;


/*Ghost Legs is a kind of lottery game common in Asia. It starts with a number of vertical lines. 
Between the lines there are random horizontal connectors binding all lines into a connected diagram, 
like the one below.

A  B  C
|  |  |
|--|  |
|  |--|
|  |--|
|  |  |
1  2  3


To play the game, a player chooses a line in the top and follow it downwards. When a horizontal connector 
is encountered, he must follow the connector to turn to another vertical line and continue downwards. 
Repeat this until reaching the bottom of the diagram.

In the example diagram, when you start from A, you will end up in 2. Starting from B will end up in 1. 
Starting from C will end up in 3. It is guaranteed that every top label will map to a unique 
bottom label.

Given a Ghost Legs diagram, find out which top label is connected with which bottom label. 
List all connected pairs.*/


class Solution
{
    static void Main(string[] args)
    {
         //Read diagram size.
        string[] line = Console.ReadLine().Split();
        int W = int.Parse(line[0]);//Width of the diagram 
        int H = int.Parse(line[1]);//Height of the diagram
        
        //Read top labels and create start indices.
        string[] T = Console.ReadLine().Split(new [] { "  " }, StringSplitOptions.None);
        int[] Ti = new int[T.Length];
        
        for (int i = 0; i < Ti.Length; i++)
        {
            Ti[i] = i;
        }
        
        //Read diagram lines.
        for (int i = 0; i < H - 2; i++)
        {
            line = Console.ReadLine().Split('|');
            
            //Search for horizontal lines.
            for (int j = 0; j < line.Length; j++)
            {
                if (line[j] == "--")
                {
                    //Check where the horizontal line is and change indices.
                    for (int k = 0; k < Ti.Length; k++)
                    {
                        if (Ti[k] == j - 1)
                        {
                            Ti[k] += 1;
                        }
                        else if (Ti[k] == j)
                        {
                            Ti[k] -= 1;
                        }
                    }
                }
            }
        }
        
        //Read bottom labels.
        string[] B = Console.ReadLine().Split(new [] { "  " }, StringSplitOptions.None);
        
        //Print result.
        for (int i = 0; i < T.Length; i++)
        {
            Console.WriteLine(T[i] + B[Ti[i]]);
        }
    }
}

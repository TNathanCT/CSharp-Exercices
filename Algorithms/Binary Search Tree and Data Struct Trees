//Logarithms -> how many times can we chop it in half?
//log(2)16 = 4 (it can be chopped down 4 times in half)

//say we had 4 billion nodes we have to search through, by using the log(2)4000000000 = 32, know that we have to look through 32 steps to find the node we are looking for.

public void traverse(){
      if(left != null){
            left.traverse();
            }
      Console.WriteLine(this.data);//Print out the last node
      if(right != null){
            right.traverse();
      }
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------


class Node{
      Node left, right;
      int data;
      
      public Node(int data){
            this.data = data;
      }
      
      //Small goes to the left, and big goes to the right
      
      public void insert (int value){
            if(value <= data){
                  if(left == nul){ 
                        left = new Node(value);
                  } else {
                        left.insert(value);
                         }
                  } 
                  
                  else (right == nul){
                        right = new Node(value);
                  } else {
                        right.insert(value);
                         }
                  }
       }
       
       
       public boolean contains(int value){
            if(value == data){
                       return true;
            }
            else if (value < data){
                        if(left == null){
                                    return false;
                        }
                        else{
                                    return left.contains(value);
                        }
           }
           else {
                          if(right == null){
                                    return false;
                        }
                        else{
                                    return right.contains(value);
                        }
           }
           
           
           public void printInOrder(){
                  if(left != null){
                        left.printInOrder();
                  }
                  
                  System.out.pintIn(data);
                  if(right != null){
                        right.printInOrder();
                  }
}
            
                        

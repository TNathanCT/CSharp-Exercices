using UnityEngine;
using System.Collections;
using System.Collections.Generic;

public class Pathfinding : MonoBehaviour {

//	public Transform seeker, target;
	Grid grid;

	void Awake() {
		grid = GetComponent<Grid> ();
	}

//	void Update() {
//		FindPath (seeker.position, target.position);
//	}

//	void FindPath(Vector3 startPos, Vector3 targetPos) {
//		Node startNode = grid.NodeFromWorldPoint(startPos);//set the start position
//		Node targetNode = grid.NodeFromWorldPoint(targetPos);//set the target position
//
//		List<Node> openSet = new List<Node>();
//		HashSet<Node> closedSet = new HashSet<Node>();
//		openSet.Add(startNode);
//
//		while (openSet.Count > 0) {//the openset is not empty, keep looping.
//			Node node = openSet[0];
//			for (int i = 1; i < openSet.Count; i ++) {//loop through all of the open nodes in the set.
//				if (openSet[i].fCost < node.fCost || openSet[i].fCost == node.fCost) {
//					if (openSet[i].hCost < node.hCost)
//						node = openSet[i];
//				}
//			}
//
//			openSet.Remove(node);
//			closedSet.Add(node);
//
//			if (node == targetNode) {
//				RetracePath(startNode,targetNode);//found our path; exit out of the loop.
//				return;
//			}
//
//			foreach (Node neighbour in grid.GetNeighbours(node)) {
//				if (!neighbour.walkable || closedSet.Contains(neighbour)) { 
//					continue;
//				}
//
//				int newCostToNeighbour = node.gCost + GetDistance(node, neighbour);
//				if (newCostToNeighbour < neighbour.gCost || !openSet.Contains(neighbour)) {
//					neighbour.gCost = newCostToNeighbour;
//					neighbour.hCost = GetDistance(neighbour, targetNode);
//					neighbour.parent = node;
//
//					if (!openSet.Contains(neighbour))
//						openSet.Add(neighbour);
//					else {
//						//openSet.UpdateItem(neighbour);
//					}
//				}
//			}
//		}
//	}
//

//start the coroutine.
	public void StartFindPath(Vector3 startPos, Vector3 targetPos) {
		StartCoroutine(FindPath(startPos,targetPos));
	}
	
	IEnumerator FindPath(Vector3 startPos, Vector3 targetPos) {

		Vector3[] waypoints = new Vector3[0];
		bool pathSuccess = false;
		
		Node startNode = grid.NodeFromWorldPoint(startPos);
		Node targetNode = grid.NodeFromWorldPoint(targetPos);
		
		
		if (startNode.walkable && targetNode.walkable) {
			Heap<Node> openSet = new Heap<Node>(grid.MaxSize);
			HashSet<Node> closedSet = new HashSet<Node>();
			openSet.Add(startNode);
			
			while (openSet.Count > 0) {
				Node currentNode = openSet.RemoveFirst();
				closedSet.Add(currentNode);
				
				if (currentNode == targetNode) {
					pathSuccess = true;
					break;
				}
				
				foreach (Node neighbour in grid.GetNeighbours(currentNode)) {
					if (!neighbour.walkable || closedSet.Contains(neighbour)) {
						continue;
					}
					
					int newMovementCostToNeighbour = currentNode.gCost + GetDistance(currentNode, neighbour);
					if (newMovementCostToNeighbour < neighbour.gCost || !openSet.Contains(neighbour)) {
						neighbour.gCost = newMovementCostToNeighbour;
						neighbour.hCost = GetDistance(neighbour, targetNode);
						neighbour.parent = currentNode;
						
						if (!openSet.Contains(neighbour))
							openSet.Add(neighbour);
					}
				}
			}
		}
		yield return null;//wait one frame before returning.
		if (pathSuccess) {
			waypoints = RetracePath(startNode,targetNode);
		}
		requestManager.FinishedProcessingPath(waypoints,pathSuccess);
		
	}


	Vector3[] RetracePath(Node startNode, Node endNode) {
		List<Node> path = new List<Node>();
		Node currentNode = endNode;
		
		while (currentNode != startNode) {
			path.Add(currentNode);
			currentNode = currentNode.parent;
		}
		Vector3[] waypoints = SimplifyPath(path);
		Array.Reverse(waypoints);
		return waypoints;
		
	}
	
	//The waypoints are placed in areas where the gameobject will change direction to keep things simple.
	Vector3[] SimplifyPath(List<Node> path) {
		List<Vector3> waypoints = new List<Vector3>();
		Vector2 directionOld = Vector2.zero;
		
		for (int i = 1; i < path.Count; i ++) {
			Vector2 directionNew = new Vector2(path[i-1].gridX - path[i].gridX,path[i-1].gridY - path[i].gridY);
			if (directionNew != directionOld) {
				waypoints.Add(path[i].worldPosition);
			}
			directionOld = directionNew;
		}
		return waypoints.ToArray();
	}

	int GetDistance(Node nodeA, Node nodeB) {
		int dstX = Mathf.Abs(nodeA.gridX - nodeB.gridX);
		int dstY = Mathf.Abs(nodeA.gridY - nodeB.gridY);

		if (dstX > dstY)
			return 14*dstY + 10* (dstX-dstY);//return to the center of each of cube in the grid.
		return 14*dstX + 10 * (dstY-dstX);
	}
}

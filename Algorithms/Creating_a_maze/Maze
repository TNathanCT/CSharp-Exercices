using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Maze : MonoBehaviour
{


    public GameObject wall; //Where we will call the wall
    public int xSize = 5; //size of wall on the X axis
    public int ySize = 5; //size of wall on the y axis
    public float walllength = 1;//size of the wall on the z axis (in this case, it's the height)

    Vector3 initialposition; //initial position of the maze.

    GameObject ParentofMaze;
    public Cell[] cell;




    private void Start()
    {
        GenerateWalls();
    }

    void GenerateWalls()
    {

        //In order to keep things clean, I will put all the mazewalls as children of one gameobject.
        ParentofMaze = new GameObject();
        ParentofMaze.name = "Maze";



        //Since we want to be on the center of the screen, we divide the x axis by 2
        initialposition = new Vector3 ((-xSize/2) +walllength/2, 0f, (-ySize/2)+walllength/2);

        //find the current position
        Vector3 myposition = initialposition;
        GameObject tempWall;



        //create the for loops to create the walls
        //this one will generate the walls on the x axis
        for(int i  = 0; i < ySize; i++)
        {
            for(int x = 0; x <= xSize; x++)
            {
                myposition = new Vector3(initialposition.x + (x * walllength) - walllength / 2, 0f, initialposition.z + (i * walllength) - walllength/ 2);
                //spawn the wall
                tempWall = Instantiate(wall, myposition, Quaternion.identity) as GameObject;
                tempWall.transform.parent = ParentofMaze.transform;


            }
        }

        //this one will generate the walls on the y axis
        for (int i = 0; i <= ySize; i++)
        {
            for (int j = 0; j < xSize; j++)
            {
                myposition = new Vector3(initialposition.x + (j * walllength), 0f, initialposition.z + (i * walllength) - walllength);
                //spawn the wall and we will rotate it 90Â°
                tempWall = Instantiate(wall, myposition, Quaternion.Euler(0f, 90f,0f)) as GameObject;
                tempWall.transform.parent = ParentofMaze.transform;



            }
        }

        GeneratetheCells();
    }





    void GeneratetheCells()
    {
        
        //since we don't necessarily know how many walls the scene has, we create a variable that counts all the gameobjects that are a child of the Maze GO.
        int childrenofMaze = ParentofMaze.transform.childCount;
        //we going to save all the walls in the scene
        GameObject[] AlloftheWallsinScene = new GameObject[childrenofMaze];

        cell = new Cell[xSize * ySize];
        int rightleftprocess = 0;
        int childProcess = 0;
        int count = 0;


        for (int i = 0; i< childrenofMaze; i++)
        {
            AlloftheWallsinScene[i] = ParentofMaze.transform.GetChild(i).gameObject;
        }

        //assign the walls to each cell
        for (int cellprocess = 0; cellprocess < cell.Length; cellprocess++)
        {
            cell[cellprocess] = new Cell();
            //We're going to go through the cells one by one.
            cell[cellprocess].Left = AlloftheWallsinScene[rightleftprocess];
            cell[cellprocess].Bottom = AlloftheWallsinScene[childProcess+(xSize+1)*ySize];
            
            if(count == xSize)
            {
                rightleftprocess+=2;
                count = 0;
            }
            else
            {
                rightleftprocess++;
            }

            count++;
            childProcess++;
            cell[cellprocess].Right = AlloftheWallsinScene[rightleftprocess];
            cell[cellprocess].Top = AlloftheWallsinScene[(childProcess + (xSize + 1) * ySize) + xSize-1];


        }
    }







//we're creating this class because I want to keep an eye on what's going on in the inspector.
[System.Serializable] //thanks to this, we can see it in the inspector.
    public class Cell
    {
        bool hastheSystemcheckedthiscell;
        public GameObject Top;
        public GameObject Left;
        public GameObject Right;
        public GameObject Bottom;
    }
}
